---
import type { PlayerScoreEntry } from '../lib/graphql';
import { getHallOfFameLeaderboard } from '../lib/graphql';

// Server-side data fetching
let leaderboard: PlayerScoreEntry[] = [];
let error: string | null = null;

try {
  leaderboard = await getHallOfFameLeaderboard(10);
} catch (err) {
  error = 'No se pudo cargar el Salón de la Fama.';
  console.error(err);
}

// Process data
const top3 = leaderboard.slice(0, 3);
const restOfPlayers = leaderboard.slice(3);
---

<script>
  import type { PlayerScoreEntry } from '../lib/graphql';
  // Client-side interactivity
  document.addEventListener('DOMContentLoaded', () => {
    const refreshButton = document.getElementById('refresh-leaderboard-button');
    const leaderboardContainer = document.getElementById('leaderboard-container');
    
    let refreshing = false;
    
    refreshButton?.addEventListener('click', async () => {
      if (refreshing || !leaderboardContainer) return;
      
      try {
        refreshing = true;
        
        // Update button state
        if (refreshButton instanceof HTMLButtonElement) {
          refreshButton.disabled = true;
          refreshButton.querySelector('svg')?.classList.add('animate-spin');
        }
        
        // Call API to refresh stats
        await fetch('/api/refresh-player-stats', { method: 'POST' });
        
        // Fetch updated leaderboard
        const response = await fetch('/api/hall-of-fame');
        const data = await response.json();
        
        // Update the UI with new data
        if (data && data.leaderboard) {
          leaderboardContainer.innerHTML = generateLeaderboardHTML(data.leaderboard);
        }
      } catch (err) {
        console.error('Error refreshing leaderboard:', err);
      } finally {
        refreshing = false;
        if (refreshButton instanceof HTMLButtonElement) {
          refreshButton.disabled = false;
          refreshButton.querySelector('svg')?.classList.remove('animate-spin');
        }
      }
    });
    
    // Generate HTML for leaderboard
    const generateLeaderboardHTML = (leaderboard: PlayerScoreEntry[]) => {
      if (!leaderboard || leaderboard.length === 0) {
        return `
          <div class="alert alert-error text-center">
            <p class="text-red-300 font-semibold">No hay datos disponibles para el Salón de la Fama.</p>
          </div>
        `;
      }
      
      const top3 = leaderboard.slice(0, 3);
      const restOfPlayers = leaderboard.slice(3);
      
        return `
          <div class="card shadow-2xl relative">
          <button 
            id="refresh-leaderboard-button"
            class="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors p-2 rounded-full hover:bg-gray-700/50"
            title="Recargar estadísticas"
            aria-label="Recargar estadísticas"
          >
            <svg 
              class="w-5 h-5" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24" 
              xmlns="http://www.w3.org/2000/svg"
            >
              <path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" 
              />
            </svg>
          </button>

          <h2 class="text-3xl font-bold text-white text-center mb-8 bg-gradient-to-r from-yellow-400 via-orange-500 to-red-600 bg-clip-text text-transparent">
            Hall of Fame
          </h2>

          <!-- Top 3 Players -->
          <div class="flex flex-col md:flex-row justify-center items-center md:items-end gap-6 mb-12">
            ${top3.map((player: PlayerScoreEntry, index: number) => `
              <div
                class="relative flex flex-col items-center p-4 rounded-xl shadow-lg border-2 
                  ${index === 0 ? 'bg-yellow-800/40 border-yellow-500 scale-110 z-10' :
                   index === 1 ? 'bg-gray-700/40 border-gray-400' :
                   'bg-orange-800/40 border-orange-500'}
                  transition-all duration-300 transform hover:scale-110
                "
                style="
                  width: ${index === 0 ? '180px' : '150px'};
                  height: ${index === 0 ? '220px' : '190px'};
                "
              >
                <!-- Rank Badge -->
                <span class="absolute -top-3 -left-3 w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold text-white 
                  ${index === 0 ? 'bg-yellow-500' : index === 1 ? 'bg-gray-400' : 'bg-orange-500'}
                ">
                  ${index + 1}
                </span>
                
                <!-- Player Head -->
                <img
                  src="https://mc-heads.net/avatar/${player.playerNick || 'MHF_Steve'}/100"
                  alt="${player.playerNick || 'Unknown Player'}"
                  class="${index === 0 ? 'w-24 h-24' : 'w-20 h-20'} rounded-lg mb-2"
                  loading="lazy"
                />

                <!-- Player Name -->
                <div class="flex items-center gap-1 mb-1">
                  ${player.isBot ? `
                    <span title="Bot" class="text-xs bg-gray-700 text-gray-300 px-1 rounded">BOT</span>
                  ` : ''}
                  <p class="text-lg font-bold text-white">
                    ${player.playerNick || `ID: ${player.playerId}`}
                  </p>
                </div>

                <!-- Score -->
                <p class="text-xl font-bold text-yellow-400">
                  ${player.score} <span class="text-sm">★</span>
                </p>
              </div>
            `).join('')}
          </div>

          <!-- Rest of Players Table -->
          ${restOfPlayers.length > 0 ? `
            <div class="mt-8">
              <h3 class="text-xl font-bold text-white mb-4 text-center">Más Jugadores</h3>
            <div class="overflow-x-auto">
              <table class="table-base">
                  <thead>
                    <tr class="table-head">
                      <th class="py-3 px-4">Rank</th>
                      <th class="py-3 px-4">Jugador</th>
                      <th class="py-3 px-4 text-right">Puntuación</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${restOfPlayers.map((player: PlayerScoreEntry, index: number) => `
                      <tr class="border-t border-gray-700 last:border-b-0 even:bg-gray-800/30">
                        <td class="py-3 px-4 text-gray-400">${index + 4}.</td>
                        <td class="py-3 px-4 flex items-center gap-3">
                          <img
                            src="https://mc-heads.net/avatar/${player.playerNick || 'MHF_Steve'}/32"
                            alt="${player.playerNick || 'Unknown Player'}"
                            class="w-8 h-8 rounded"
                            loading="lazy"
                          />
                          <div class="flex items-center gap-1">
                            ${player.isBot ? `
                              <span title="Bot" class="text-xs bg-gray-700 text-gray-300 px-1 rounded">BOT</span>
                            ` : ''}
                            <span class="text-white font-medium">
                              ${player.playerNick || `ID: ${player.playerId}`}
                            </span>
                          </div>
                        </td>
                        <td class="py-3 px-4 text-right text-yellow-400 font-bold">
                          ${player.score} <span class="text-sm">★</span>
                        </td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
              </div>
            </div>
          ` : ''}
        </div>
      `;
    };
    
    // Auto-update every 5 minutes
    const interval = setInterval(async () => {
      if (!refreshing && leaderboardContainer) {
        try {
          const response = await fetch('/api/hall-of-fame');
          const data = await response.json();
          
          if (data && data.leaderboard) {
            leaderboardContainer.innerHTML = generateLeaderboardHTML(data.leaderboard);
          }
        } catch (err) {
          console.error('Error updating leaderboard:', err);
        }
      }
    }, 300000); // 5 minutes
    
    // Clean up interval on page navigation
    document.addEventListener('astro:page-load', () => {
      clearInterval(interval);
    });
  });
</script>

<div id="leaderboard-container" role="status" aria-live="polite">
  {error || leaderboard.length === 0 ? (
    <div class="alert alert-error text-center">
      <p class="text-red-300 font-semibold">{error || "No hay datos disponibles para el Salón de la Fama."}</p>
    </div>
  ) : (
    <div class="card shadow-2xl relative">
      <!-- Refresh button -->
      <button 
        id="refresh-leaderboard-button"
        class="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors p-2 rounded-full hover:bg-gray-700/50"
        title="Recargar estadísticas"
        aria-label="Recargar estadísticas"
      >
        <svg 
          class="w-5 h-5" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24" 
          xmlns="http://www.w3.org/2000/svg"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width={2} 
            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" 
          />
        </svg>
      </button>

      <h2 class="text-3xl font-bold text-white text-center mb-8 bg-gradient-to-r from-yellow-400 via-orange-500 to-red-600 bg-clip-text text-transparent">
        Hall of Fame
      </h2>

      <!-- Top 3 Players -->
      <div class="flex flex-col md:flex-row justify-center items-center md:items-end gap-6 mb-12">
        {top3.map((player, index) => (
          <div
            class:list={[
              "relative flex flex-col items-center p-4 rounded-xl shadow-lg border-2",
              {
                'bg-yellow-800/40 border-yellow-500 scale-110 z-10': index === 0,
                'bg-gray-700/40 border-gray-400': index === 1,
                'bg-orange-800/40 border-orange-500': index === 2
              },
              "transition-all duration-300 transform hover:scale-110"
            ]}
            style={`width: ${index === 0 ? '180px' : '150px'}; height: ${index === 0 ? '220px' : '190px'};`}
          >
            {/* Rank Badge */}
            <span class:list={[
              "absolute -top-3 -left-3 w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold text-white",
              {
                'bg-yellow-500': index === 0,
                'bg-gray-400': index === 1,
                'bg-orange-500': index === 2
              }
            ]}>
              {index + 1}
            </span>
            
            {/* Player Head */}
            <img
              src={`https://mc-heads.net/avatar/${player.playerNick || 'MHF_Steve'}/100`}
              alt={player.playerNick || 'Unknown Player'}
              class:list={[`rounded-lg mb-2`, { 'w-24 h-24': index === 0, 'w-20 h-20': index !== 0 }]}
              loading="lazy"
            />

            {/* Player Name */}
            <div class="flex items-center gap-1 mb-1">
              {player.isBot && (
                <span title="Bot" class="text-xs bg-gray-700 text-gray-300 px-1 rounded">BOT</span>
              )}
              <p class="text-lg font-bold text-white">
                {player.playerNick || `ID: ${player.playerId}`}
              </p>
            </div>

            {/* Score */}
            <p class="text-xl font-bold text-yellow-400">
              {player.score} <span class="text-sm">★</span>
            </p>
          </div>
        ))}
      </div>

      <!-- Rest of Players Table -->
      {restOfPlayers.length > 0 && (
        <div class="mt-8">
          <h3 class="text-xl font-bold text-white mb-4 text-center">Más Jugadores</h3>
          <div class="overflow-x-auto">
            <table class="table-base">
              <thead>
                <tr class="table-head">
                  <th class="py-3 px-4">Rank</th>
                  <th class="py-3 px-4">Jugador</th>
                  <th class="py-3 px-4 text-right">Puntuación</th>
                </tr>
              </thead>
              <tbody>
                {restOfPlayers.map((player, index) => (
                  <tr class="border-t border-gray-700 last:border-b-0 even:bg-gray-800/30">
                    <td class="py-3 px-4 text-gray-400">{index + 4}.</td>
                    <td class="py-3 px-4 flex items-center gap-3">
                      <img
                        src={`https://mc-heads.net/avatar/${player.playerNick || 'MHF_Steve'}/32`}
                        alt={player.playerNick || 'Unknown Player'}
                        class="w-8 h-8 rounded"
                        loading="lazy"
                      />
                      <div class="flex items-center gap-1">
                        {player.isBot && (
                          <span title="Bot" class="text-xs bg-gray-700 text-gray-300 px-1 rounded">BOT</span>
                        )}
                        <span class="text-white font-medium">
                          {player.playerNick || `ID: ${player.playerId}`}
                        </span>
                      </div>
                    </td>
                    <td class="py-3 px-4 text-right text-yellow-400 font-bold">
                      {player.score} <span class="text-sm">★</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  )}
</div>
